version: '3.8'

services:
  django-frontend:
    env_file:
      - .env
    container_name: django-frontend
    build:
      context: ./django-frontend
    image: django-frontend:latest
    volumes:
      - ./django-frontend:/app
    command: python src/manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    networks:
      - transcendence-network
    depends_on:
      database:
        condition: service_healthy

  api-gateway:
    env_file:
      - .env
    container_name: api-gateway
    build:
      context: ./drf-api-gateway
    image: drf-api-gateway:latest
    volumes:
      - ./drf-api-gateway:/app
    command: python src/manage.py runserver 0.0.0.0:3000
    ports:
      - "3000:3000"
    networks:
      - transcendence-network
    depends_on:
      database:
        condition: service_healthy

  api-users:
    env_file:
      - .env
    container_name: api-users
    build:
      context: ./drf-api-users
    image: drf-api-users:latest
    volumes:
      - ./drf-api-users:/app
    command: python src/manage.py runserver 0.0.0.0:3001
    ports:
      - "3001:3001"
    networks:
      - transcendence-network
    depends_on:
      database:
        condition: service_healthy

  reverse-proxy:
    container_name: reverse-proxy
    build:
      context: ./reverse-proxy
    image: reverse-proxy:latest
    ports:
      - "80:80"
    networks:
      - transcendence-network
    depends_on:
      - django-frontend
      - api-gateway

  database:
    env_file:
      - .env
    container_name: database
    build:
      context: ./postgres
    image: postgres:16.2-alpine3.19
    volumes:
      - ./postgres/postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - transcendence-network
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
        interval: 10s
        timeout: 5s
        retries: 5

networks:
  transcendence-network:
    driver: bridge
